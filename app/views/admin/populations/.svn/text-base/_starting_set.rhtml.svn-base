<% klass = @population.populatable_type.constantize if @population.populatable_type %>
<div class="big-border orange box" id="starting_set" <%= "style='display:none'" if @population.custom_query? %>>

	<h4 class="icon-left select-list">
		Start with this object:
		<span class="light right">
			<%= link_to_function "Write custom query", 
								"Effect.toggle('custom_query', 'blind', {duration: 0.25});
								Effect.toggle('starting_set', 'blind', {duration: 0.25});
								Effect.toggle('result_variant', 'blind', {duration: 0.25});
								Effect.toggle('conditions_container', 'blind', {duration: 0.25});
								$('use_custom_query').value = 'true'",
								:class => 'button' %></span>
		</h4>

	<dl class="inline-definitions">

		<dt>Type</dt>
		<dd><%= select :population,
						:populatable_type, 
						Population.preferred_model_names.sort.map{|m| [m.titleize, m]}, 
						:prompt => true %>
			<%= observe_field "population_populatable_type", 
								:url => refresh_dropdowns_population_path(@population),
								:submit => "starting_set",
								:indicator => 'global' %>
			</dd>
		<dt>Object</dt>
		<dd>
			<% if klass == Population %>
				<select id="population_populatable_id" name="population[populatable_id]">
					<% if @population.populatable %>
						<option value="<%= @population.populatable_id %>"><%= @population.populatable.title %></option>
					<% end -%>
					<% grouped_options = {
						'My Queries' => @user_populations.collect{|p| 
							["#{p.title} (#{pluralize(p.read_attribute(:objects_count), "record")})", p.id]},
						'My Program(s) Queries' => @unit_populations.collect{|p| 
							["#{p.title} (#{pluralize(p.read_attribute(:objects_count), "record")})", p.id]},
						'Open to Anyone' => @everyone_populations.collect{|p| 
							["#{p.title} (#{pluralize(p.read_attribute(:objects_count), "record")})", p.id]}
						}
					 %>
					<%= grouped_options_for_select grouped_options %>
				</select>
			
			<%- else -%>
				<%= collection_select :population,
									:populatable_id, 
									(klass.all.sort rescue []),
									:id,
									:title,
									:prompt => true %>
			<% end -%>
			</dd>
								
		<dt>Starting set</dt>
		<% associations = klass.reflect_on_all_associations(:has_many).map{|a| a.name.to_s}.sort rescue [] %>
		<% associations << "objects" if @population.populatable_type == "Population" %>
		<dd><%= select :population,
						:starting_set, 
						([@population.starting_set] << associations).flatten.sort,
						:prompt => true %>
			<%= observe_field "population_starting_set", 
								:url => refresh_dropdowns_population_path(@population),
								:submit => "starting_set",
								:indicator => 'global' %>
			
			</dd>

	</dl>

</div>

<div class="big-border orange box" id="custom_query" <%= "style='display:none'" unless @population.custom_query? %>>

	<h4 class="icon-left select-list">
		Use this custom query:
		<span class="light right">
			<%= link_to_function "Select a starting set", 
								"Effect.toggle('custom_query', 'blind', {duration: 0.25});
								Effect.toggle('starting_set', 'blind', {duration: 0.25});
								Effect.toggle('result_variant', 'blind', {duration: 0.25});
								Effect.toggle('conditions_container', 'blind', {duration: 0.25});
								$('use_custom_query').value = 'false'",
								:class => 'button' %></span>
		</h4>
		
	<%= content_tag(:span, "You are not allowed to write custom queries.", :class => 'error-message') unless @current_user.has_role?(:custom_query_writer) %>
		
	<%= text_area :population, :custom_query, :rows => 5, :style => "width: 99%", :class => 'code',
				  :disabled => ('disabled' unless @current_user.has_role?(:custom_query_writer)) %>
	
	<p class="caption">This code snippet must return an array of objects.</p>

	<%= hidden_field_tag :use_custom_query, @population.custom_query?.to_s %>

</div>

