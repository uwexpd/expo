<% form_url ||= submit_evaluation_community_partner_service_learning_student_path(@quarter, @placement) %>

<% form_for @evaluation, :url => form_url do |f| %>

	<dl class="inline-definitions">
	
		<dt>Student:</dt>
		<dd><%= @placement.person.fullname %></dd>
		
		<% if @is_pipeline %>
			<dt>Organization:</dt>
			<dd><%= @placement.position.organization.name %></dd>
		<% end %>
		
		<dt>Position:</dt>
		<dd><%= @placement.position.title %></dd>
	
		<dt>Supervisor:</dt>
		<dd><%= @placement.position.supervisor.fullname rescue "(none)" %>
			<br>
			<%= render :partial => "community_partner/service_learning/students/non_supervisor_completer", :locals => { :f => f } %>
			</dd>
	
		<dt>Input By:</dt>
		<dd><%= @evaluation.submitted? ? @evaluation.updater.fullname : @current_user.fullname %></dd>
		
		<% if @evaluation.submitted? %>
			<dt>Submitted:</dt>
			<dd><%= @evaluation.updated_at.to_formatted_s(:date_time12) %>
				(<%= time_ago_in_words @evaluation.updated_at %> ago)</dd>
		<% end -%>
	
	</dl>
		

	<table>
		<tr class="small">
			<th></th>
			<th></th>
			<th class="red">Strongly disagree</th>
			<th>Disagree</th>
			<th>Neutral</th>
			<th>Agree</th>
			<th class="green">Strongly agree</th>
			<th class="grey">No basis for judgment</th>
		</tr>
		<% evaluation_questions_unit = @placement.unit_id == 9 ? 1 : @placement.unit_id # force bothell to use carlson's evaluation's questions %>
		<% @quarter.service_learning_evaluation_questions.for_unit(evaluation_questions_unit).reject{|q| q.display_as != 'scale_rating'}.each_with_index do |question,i| %>
		<% response = @evaluation.response_for(question) %>
		
			<% response.valid? if @show_errors # HACK to make the errors on the associated model show up. Not sure what's happening here %>
			
			<% fields_for "evaluation[response][#{question.id}]", response do |r| %>
				<%= render 	:partial => "community_partner/service_learning/students/evaluations/#{question.display_as}", 
							:locals => { :r => r, :i => i, :response => response, :question => question} %>
			<% end -%>
		
		<% end -%>

	</table>

	<div class="smaller">

	<% @quarter.service_learning_evaluation_questions.for_unit(evaluation_questions_unit).reject{|q| q.display_as == 'scale_rating'}.each_with_index do |question,i| %>
	<% response = @evaluation.response_for(question) %>
		
		<% response.valid? if @show_errors %>
		
		<% fields_for "evaluation[response][#{question.id}]", response do |r| %>
		
			<%= render 	:partial => "community_partner/service_learning/students/evaluations/#{question.display_as}", 
						:locals => { :r => r, :i => i, :response => response, :question => question } %>
						
			<% if @is_pipeline && question.display_as == "tutoring" %>
					<table class="left-indent" style="width:35%; margin:1em 4em">
						<tr class="small left">
							<th>Date</th>
							<th>Hours</th>
						</tr>
						<% for tutoring_log in @tutoring_logs %>
							<tr>
								<td><%= tutoring_log.log_date rescue "<span class='red'>Unknown</span>" %></td>
								<td><%= tutoring_log.hours rescue "<span class='red'>Unknown</span>" %></td>						
							</tr>										
						<% end -%>
						<tr>
							<td>Total hours</td>
							<td><%= @placement.tutoring_logs.sum('hours').to_s %></td>
						</tr>						
						<% if @tutoring_logs.empty? %>
							<tr class="empty">
								<td colspan=2>No tutoring log submitted. </td>
							</tr>
						<% end -%>
					</table>							
			<% end %>									
						
		<% end -%>
				
	<% end -%>		
	
	</div>

	<% unless @evaluation.submitted? %>
	<br><center>
		<%= f.submit "Submit Evaluation", :disable_with => 'Submitting evaluation...', :disabled => @evaluation.submitted? %>
	</center>
	<% end -%>
	
<% end -%>
